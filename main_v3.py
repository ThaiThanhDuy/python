import sys
import os
import cv2
import time
import pandas as pd
import pyttsx3
import textwrap
import openpyxl
import google.generativeai as genai
from gtts import gTTS
from playsound3 import playsound
from PyQt5.QtWidgets import QFileDialog
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtCore import Qt, QThread
from PyQt5.QtWidgets import QStackedWidget, QListWidgetItem, QMessageBox
from QT_Duong import Ui_MainWindow
import speech_recognition as sr
from playsound3 import playsound  # Thay ƒë·ªïi import ·ªü ƒë√¢y
import gemini
from AppAl_v1 import TextProcessor, main

# C·∫•u h√¨nh API key
GOOGLE_API_KEY = "AIzaSyCxp0wD3-6nZOKaRn_WUkvzwlHOKfw-hJw"
if not GOOGLE_API_KEY:
    print("L·ªói: Vui l√≤ng thi·∫øt l·∫≠p API Key.")
    exit()
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")


def speak_vietnamese_gg(text):
    try:
        tts = gTTS(text=text, lang="vi")
        filename = "temp_speech.mp3"
        tts.save(filename)
        playsound(filename)
        os.remove(filename)
    except Exception as e:
        print(e)


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        # xoa trang khi moi khoi dong
        self.ui.tc_nha_truong.clear()  # Reset danh s√°ch c√¢u h·ªèi
        self.ui.label_cau_hoi_ai.clear()
        self.ui.label_tra_loi_ai.clear()
        self.ui.tra_loi_tc_nha_truong.clear()  # Reset ch·ªó hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        # gan su kien
        self.ui.tc_nha_truong.itemClicked.connect(self.on_question_clicked)
        # trang thai ai
        self.ai_dang_chay = False

        # canh giua cho Qlabel
        self.ui.tra_loi_tc_nha_truong.setAlignment(Qt.AlignCenter)
        # Chuc nang nut back
        self.ui.bt_back_tc_nha_truong.clicked.connect(self.home_ui)
        self.ui.bt_back_tc_ai.clicked.connect(self.home_ui)
        self.ui.bt_tc_cap_nhat.clicked.connect(self.load_excel)
        self.ui.bt_tra_cuu.clicked.connect(self.tra_cuu)
        self.ui.btn_bat_dau_ai.clicked.connect(self.toggle_start_ai)
        self.ui.btn_tich_hoi_ai.clicked.connect(self.xac_nhan_cau_hoi_ai)
        self.ui.btn_huy_hoi_ai.clicked.connect(self.huy_cau_hoi_ai)

    def toggle_start_ai(self):
        if not self.ai_dang_chay:
            self.ui.btn_bat_dau_ai.setText("K·∫øt th√∫c")
            self.ui.label_cau_hoi_ai.clear()
            self.ai_dang_chay = True
            # xu li ai tai day
            # üé§ Ghi √¢m v√† chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n
            r = sr.Recognizer()
            with sr.Microphone() as source:
                # self.ui.label_cau_hoi_ai.setText("üéô ƒêang kh·ªüi ƒë·ªông micro...")
                self.ui.label_lang_nghe.setText("üü¢ T√¥i ƒëang l·∫Øng nghe b·∫°n...")
                QtWidgets.QApplication.processEvents()  # C·∫≠p nh·∫≠t giao di·ªán ngay

                r.adjust_for_ambient_noise(source)
                try:
                    # ‚è± TƒÉng th·ªùi gian ghi t·ªëi ƒëa l√™n 10 gi√¢y
                    audio = r.listen(source, timeout=10, phrase_time_limit=10)

                    text = r.recognize_google(audio, language="vi-VN")
                    self.cau_hoi_text = text
                    self.ui.label_cau_hoi_ai.setText(f"üé§ C√¢u h·ªèi: {text}")
                    self.ui.label_tra_loi_ai.setText(
                        "‚úÖ ƒê√£ ghi √¢m xong. Nh·∫•n 'X√°c nh·∫≠n' ƒë·ªÉ g·ª≠i."
                    )
                except sr.UnknownValueError:
                    self.ui.label_cau_hoi_ai.setText(
                        "‚ùå Kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i.B·∫°n b·∫•m H·ªßy ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i nh√© "
                    )
                    self.ui.label_tra_loi_ai.setText("")
                except sr.RequestError as e:
                    self.ui.label_cau_hoi_ai.setText(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
                    self.ui.label_tra_loi_ai.setText("")
                except sr.WaitTimeoutError:
                    self.ui.label_cau_hoi_ai.setText(
                        "‚åõ H·∫øt th·ªùi gian ch·ªù. B·∫°n ch∆∞a n√≥i g√¨."
                    )
                    self.ui.label_tra_loi_ai.setText("‚ùó Vui l√≤ng th·ª≠ l·∫°i.")

        else:
            self.ui.btn_bat_dau_ai.setText("B·∫Øt ƒë·∫ßu")
            self.ai_dang_chay = False
            self.ui.label_cau_hoi_ai.clear()
            self.ui.label_tra_loi_ai.clear()
            self.ui.label_lang_nghe.setText(
                "üî¥üî¥ B·∫°n mu·ªën tra c·ª©u th√¨ h√£y b·∫•m b·∫Øt ƒë·∫ßu nh√© !"
            )

    def xac_nhan_cau_hoi_ai(self):
        if not self.cau_hoi_text:
            self.ui.label_tra_loi_ai.setText("‚ö†Ô∏è Ch∆∞a c√≥ c√¢u h·ªèi ƒë·ªÉ g·ª≠i.")
            return

        self.ui.label_tra_loi_ai.setText("ü§ñ ƒêang x·ª≠ l√Ω c√¢u h·ªèi... Vui l√≤ng ch·ªù.")
        QtWidgets.QApplication.processEvents()
        self.ui.label_cau_hoi_ai.clear()
        self.ui.label_tra_loi_ai.clear()
        try:

            response = model.generate_content(self.cau_hoi_text)

            if hasattr(response, "text") and response.text:
                tra_loi = response.text.strip()
                self.ui.label_tra_loi_ai.setText(f"üí¨ Tr·∫£ l·ªùi: {tra_loi}")
                # Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
                tts = gTTS(text=response.text, lang="vi")
                tts.save("phan_hoi_v3.mp3")
                playsound("phan_hoi_v3.mp3")
                os.remove("phan_hoi_v3.mp3")
                self.cau_hoi_text = ""

            else:
                self.ui.label_tra_loi_ai.setText("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.")

        except Exception as e:
            self.ui.label_tra_loi_ai.setText(f"‚ùå L·ªói khi g·ª≠i c√¢u h·ªèi: {str(e)}")

    def huy_cau_hoi_ai(self):
        self.cau_hoi_text = ""
        self.ui.label_cau_hoi_ai.setText(
            "üîÑ C√¢u h·ªèi ƒë√£ b·ªã h·ªßy. Vui l√≤ng nh·∫•n 'B·∫Øt ƒë·∫ßu' ƒë·ªÉ thu l·∫°i."
        )
        self.ui.label_tra_loi_ai.setText("")
        self.ui.btn_bat_dau_ai.setText("B·∫Øt ƒë·∫ßu")
        self.ai_dang_chay = False

    def tra_cuu(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.pape_tra_cuu)

    def home_ui(self):
        self.ui.stackedWidget.setCurrentWidget(self.ui.page_main)

    def load_excel(self):

        try:
            df = pd.read_excel("data_v1.xlsx", header=None, engine="openpyxl")
            df = df.iloc[:, :2]
            df.columns = ["C√¢u h·ªèi", "C√¢u tr·∫£ l·ªùi"]
            df.dropna(how="any", inplace=True)

            self.ui.tc_nha_truong.clear()
            for _, row in df.iterrows():
                item = QListWidgetItem(row["C√¢u h·ªèi"])
                item.setData(Qt.UserRole, row["C√¢u tr·∫£ l·ªùi"])
                item.setTextAlignment(Qt.AlignLeft)  # Canh gi·ªØa
                self.ui.tc_nha_truong.addItem(item)
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file Excel: {str(e)}")

    def on_question_clicked(self):
        item = self.ui.tc_nha_truong.currentItem()
        if item:
            answer = item.data(Qt.UserRole)
            test = answer
            print(test)
            self.ui.tra_loi_tc_nha_truong.setText(test)

            if self.ui.checkBox_giong_noi_2.isChecked():
                self.ui.tra_loi_tc_nha_truong.setText(answer)
                speak_vietnamese_gg(answer)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
